// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ClockinAdminServiceHTTPServer interface {
	GetWorkTime(context.Context, *GetWorkTimeRequest) (*GetWorkTimeReply, error)
}

func RegisterClockinAdminServiceHTTPServer(s *http.Server, srv ClockinAdminServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/clockin/v1/getWorkTime", _ClockinAdminService_GetWorkTime0_HTTP_Handler(srv))
}

func _ClockinAdminService_GetWorkTime0_HTTP_Handler(srv ClockinAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkTimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.clockin.admin.v1.ClockinAdminService/GetWorkTime")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkTime(ctx, req.(*GetWorkTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkTimeReply)
		return ctx.Result(200, reply)
	}
}

type ClockinAdminServiceHTTPClient interface {
	GetWorkTime(ctx context.Context, req *GetWorkTimeRequest, opts ...http.CallOption) (rsp *GetWorkTimeReply, err error)
}

type ClockinAdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClockinAdminServiceHTTPClient(client *http.Client) ClockinAdminServiceHTTPClient {
	return &ClockinAdminServiceHTTPClientImpl{client}
}

func (c *ClockinAdminServiceHTTPClientImpl) GetWorkTime(ctx context.Context, in *GetWorkTimeRequest, opts ...http.CallOption) (*GetWorkTimeReply, error) {
	var out GetWorkTimeReply
	pattern := "/api/admin/clockin/v1/getWorkTime"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.clockin.admin.v1.ClockinAdminService/GetWorkTime"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
