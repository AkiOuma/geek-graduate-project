// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorktimeServiceClient is the client API for WorktimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorktimeServiceClient interface {
	GetUserWorkTime(ctx context.Context, in *GetUserWorkTimeRequest, opts ...grpc.CallOption) (*GetUserWorkTimeReply, error)
	CreateWorkTime(ctx context.Context, in *CreateWorkTimeRequest, opts ...grpc.CallOption) (*CreateWorkTimeReply, error)
}

type worktimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorktimeServiceClient(cc grpc.ClientConnInterface) WorktimeServiceClient {
	return &worktimeServiceClient{cc}
}

func (c *worktimeServiceClient) GetUserWorkTime(ctx context.Context, in *GetUserWorkTimeRequest, opts ...grpc.CallOption) (*GetUserWorkTimeReply, error) {
	out := new(GetUserWorkTimeReply)
	err := c.cc.Invoke(ctx, "/api.worktime.service.v1.WorktimeService/GetUserWorkTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worktimeServiceClient) CreateWorkTime(ctx context.Context, in *CreateWorkTimeRequest, opts ...grpc.CallOption) (*CreateWorkTimeReply, error) {
	out := new(CreateWorkTimeReply)
	err := c.cc.Invoke(ctx, "/api.worktime.service.v1.WorktimeService/CreateWorkTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorktimeServiceServer is the server API for WorktimeService service.
// All implementations must embed UnimplementedWorktimeServiceServer
// for forward compatibility
type WorktimeServiceServer interface {
	GetUserWorkTime(context.Context, *GetUserWorkTimeRequest) (*GetUserWorkTimeReply, error)
	CreateWorkTime(context.Context, *CreateWorkTimeRequest) (*CreateWorkTimeReply, error)
	mustEmbedUnimplementedWorktimeServiceServer()
}

// UnimplementedWorktimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorktimeServiceServer struct {
}

func (UnimplementedWorktimeServiceServer) GetUserWorkTime(context.Context, *GetUserWorkTimeRequest) (*GetUserWorkTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWorkTime not implemented")
}
func (UnimplementedWorktimeServiceServer) CreateWorkTime(context.Context, *CreateWorkTimeRequest) (*CreateWorkTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkTime not implemented")
}
func (UnimplementedWorktimeServiceServer) mustEmbedUnimplementedWorktimeServiceServer() {}

// UnsafeWorktimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorktimeServiceServer will
// result in compilation errors.
type UnsafeWorktimeServiceServer interface {
	mustEmbedUnimplementedWorktimeServiceServer()
}

func RegisterWorktimeServiceServer(s grpc.ServiceRegistrar, srv WorktimeServiceServer) {
	s.RegisterService(&WorktimeService_ServiceDesc, srv)
}

func _WorktimeService_GetUserWorkTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWorkTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorktimeServiceServer).GetUserWorkTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worktime.service.v1.WorktimeService/GetUserWorkTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorktimeServiceServer).GetUserWorkTime(ctx, req.(*GetUserWorkTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorktimeService_CreateWorkTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorktimeServiceServer).CreateWorkTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worktime.service.v1.WorktimeService/CreateWorkTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorktimeServiceServer).CreateWorkTime(ctx, req.(*CreateWorkTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorktimeService_ServiceDesc is the grpc.ServiceDesc for WorktimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorktimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.worktime.service.v1.WorktimeService",
	HandlerType: (*WorktimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserWorkTime",
			Handler:    _WorktimeService_GetUserWorkTime_Handler,
		},
		{
			MethodName: "CreateWorkTime",
			Handler:    _WorktimeService_CreateWorkTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/worktime/service/v1/worktime.proto",
}
